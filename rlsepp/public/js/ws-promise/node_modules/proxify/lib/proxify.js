module.exports = SimpleProxy

var fs = require('fs')
var path = require('path')

var bouncy = require('bouncy')

function SimpleProxy(config){
  this.config = config

  this.cache = {}

  this.server = bouncy(this.onRequest.bind(this))

  var self = this

  //drop permissions if needed
  if(config.group)
    process.setgid(config.group)
  if(config.user)
    process.setuid(config.user)
}

SimpleProxy.prototype.watchConfig = function watchConfig(filename){
  var self = this
  fs.watchFile(filename, function(curr, prev){
    if(curr.mtime > prev.mtime){
      delete require.cache[filename]
      self.config = require(filename)
      self.clearCache()
    }
  })
}

var ct = 0

SimpleProxy.prototype.onRequest = function onRequest(req, bounce){
  var host = req.headers.host.replace(/:.*$/)

  if(host in this.cache){
    return this.bounce(bounce, this.cache[host].connection)
  }

  for(var i in this.config.domains){
    var domain = this.config.domains[i]

    if(typeof domain.domain == 'string' && (domain.domain == host || domain.domain == '*')){
      this.cache[host] = domain
      return this.bounce(bounce, domain.connection)
    }
    if(Array.isArray(domain.domain) && domain.domain.some(function(domain){ return domain == host})){
      this.cache[host] = domain
      return this.bounce(bounce, domain.connection)
    }
  }
}

SimpleProxy.prototype.listen = function listen(port, host){
  if(port){
    this.port = port
    this.host = host
  }

  var connection = this.config.connection

  port = this.port || connection.socketPath || connection.port
  host = this.host || connection.host

  this.server.listen(port, host)
}

SimpleProxy.prototype.bounce = function(bounce, conn){
  if(Array.isArray(conn))
    //round robin that shit
    conn = conn.push(conn.shift()), conn[0]
  bounce(conn.socketPath || conn.port, conn.host)
}

SimpleProxy.prototype.clearCache = function clearCache(){
  this.cache = {}
}
